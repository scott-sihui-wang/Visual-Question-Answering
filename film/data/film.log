Will save checkpoints to data/film.pt
Reading features from ../clevr-iep/data/train_features.h5
Reading questions from  ../clevr-iep/data/train_questions.h5
Reading question data into memory
Reading features from ../clevr-iep/data/val_features.h5
Reading questions from  ../clevr-iep/data/val_questions.h5
Reading question data into memory
Here is the conditioning network:
FiLMGen(
  (encoder_embed): Embedding(93, 200)
  (encoder_rnn): GRU(200, 4096, batch_first=True)
  (decoder_linear): Linear(in_features=4096, out_features=1024, bias=True)
)
Here is the conditioned network:
FiLMedNet(
  (stem): Sequential(
    (0): Conv2d(1026, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace)
  )
  (0): FiLMedResBlock(
    (input_proj): Conv2d(130, 128, kernel_size=(1, 1), stride=(1, 1))
    (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (film): FiLM()
  )
  (1): FiLMedResBlock(
    (input_proj): Conv2d(130, 128, kernel_size=(1, 1), stride=(1, 1))
    (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (film): FiLM()
  )
  (2): FiLMedResBlock(
    (input_proj): Conv2d(130, 128, kernel_size=(1, 1), stride=(1, 1))
    (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (film): FiLM()
  )
  (3): FiLMedResBlock(
    (input_proj): Conv2d(130, 128, kernel_size=(1, 1), stride=(1, 1))
    (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
    (film): FiLM()
  )
  (classifier): Sequential(
    (0): Conv2d(130, 512, kernel_size=(1, 1), stride=(1, 1))
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace)
    (3): MaxPool2d(kernel_size=14, stride=14, padding=0, dilation=1, ceil_mode=False)
    (4): Flatten()
    (5): Linear(in_features=512, out_features=1024, bias=True)
    (6): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (7): ReLU(inplace)
    (8): Linear(in_features=1024, out_features=32, bias=True)
  )
)
train_loader has 699989 samples
val_loader has 149991 samples
Starting epoch 1
100 tensor(2.9680, device='cuda:0')
200 tensor(2.7298, device='cuda:0')
300 tensor(2.7762, device='cuda:0')
400 tensor(2.6726, device='cuda:0')
500 tensor(2.7546, device='cuda:0')
600 tensor(2.5911, device='cuda:0')
700 tensor(2.7175, device='cuda:0')
800 tensor(2.7283, device='cuda:0')
900 tensor(2.6177, device='cuda:0')
1000 tensor(2.7631, device='cuda:0')
1100 tensor(2.5618, device='cuda:0')
1200 tensor(2.6852, device='cuda:0')
1300 tensor(2.6369, device='cuda:0')
1400 tensor(2.8023, device='cuda:0')
1500 tensor(2.8307, device='cuda:0')
1600 tensor(2.7062, device='cuda:0')
1700 tensor(2.6942, device='cuda:0')
1800 tensor(2.8116, device='cuda:0')
1900 tensor(2.6766, device='cuda:0')
2000 tensor(2.6205, device='cuda:0')
2100 tensor(2.6179, device='cuda:0')
2200 tensor(2.5529, device='cuda:0')
2300 tensor(2.7178, device='cuda:0')
2400 tensor(2.6455, device='cuda:0')
2500 tensor(2.6292, device='cuda:0')
2600 tensor(2.7420, device='cuda:0')
2700 tensor(2.7251, device='cuda:0')
2800 tensor(2.5982, device='cuda:0')
2900 tensor(2.6665, device='cuda:0')
3000 tensor(2.7286, device='cuda:0')
3100 tensor(2.6700, device='cuda:0')
3200 tensor(2.7565, device='cuda:0')
3300 tensor(2.7181, device='cuda:0')
3400 tensor(2.7900, device='cuda:0')
3500 tensor(2.6568, device='cuda:0')
3600 tensor(2.8370, device='cuda:0')
3700 tensor(2.6144, device='cuda:0')
3800 tensor(2.4957, device='cuda:0')
3900 tensor(2.7698, device='cuda:0')
4000 tensor(2.7885, device='cuda:0')
4100 tensor(2.5769, device='cuda:0')
4200 tensor(2.7827, device='cuda:0')
4300 tensor(2.4925, device='cuda:0')
4400 tensor(2.6666, device='cuda:0')
4500 tensor(2.7167, device='cuda:0')
4600 tensor(2.5657, device='cuda:0')
4700 tensor(2.7139, device='cuda:0')
4800 tensor(2.7283, device='cuda:0')
4900 tensor(2.5947, device='cuda:0')
5000 tensor(2.5823, device='cuda:0')
5100 tensor(2.7269, device='cuda:0')
5200 tensor(2.5973, device='cuda:0')
5300 tensor(2.6066, device='cuda:0')
5400 tensor(2.5428, device='cuda:0')
5500 tensor(2.6610, device='cuda:0')
5600 tensor(2.7397, device='cuda:0')
5700 tensor(2.6841, device='cuda:0')
5800 tensor(2.6160, device='cuda:0')
5900 tensor(2.6591, device='cuda:0')
6000 tensor(2.5752, device='cuda:0')
6100 tensor(2.6994, device='cuda:0')
6200 tensor(2.6468, device='cuda:0')
6300 tensor(2.5206, device='cuda:0')
6400 tensor(2.6488, device='cuda:0')
6500 tensor(2.6249, device='cuda:0')
6600 tensor(2.5519, device='cuda:0')
6700 tensor(2.6524, device='cuda:0')
6800 tensor(2.6333, device='cuda:0')
6900 tensor(2.5496, device='cuda:0')
7000 tensor(2.6047, device='cuda:0')
7100 tensor(2.4889, device='cuda:0')
7200 tensor(2.6954, device='cuda:0')
7300 tensor(2.6021, device='cuda:0')
7400 tensor(2.5245, device='cuda:0')
7500 tensor(2.5969, device='cuda:0')
7600 tensor(2.5899, device='cuda:0')
7700 tensor(2.5306, device='cuda:0')
7800 tensor(2.5551, device='cuda:0')
7900 tensor(2.5214, device='cuda:0')
8000 tensor(2.6044, device='cuda:0')
8100 tensor(2.4452, device='cuda:0')
8200 tensor(2.6029, device='cuda:0')
8300 tensor(2.5579, device='cuda:0')
8400 tensor(2.4320, device='cuda:0')
8500 tensor(2.7009, device='cuda:0')
8600 tensor(2.5516, device='cuda:0')
8700 tensor(2.6524, device='cuda:0')
8800 tensor(2.5651, device='cuda:0')
8900 tensor(2.4908, device='cuda:0')
9000 tensor(2.6538, device='cuda:0')
9100 tensor(2.7426, device='cuda:0')
9200 tensor(2.5896, device='cuda:0')
9300 tensor(2.6440, device='cuda:0')
9400 tensor(2.6991, device='cuda:0')
9500 tensor(2.6014, device='cuda:0')
9600 tensor(2.6813, device='cuda:0')
9700 tensor(2.6128, device='cuda:0')
9800 tensor(2.6687, device='cuda:0')
9900 tensor(2.5078, device='cuda:0')
10000 tensor(2.6026, device='cuda:0')
10100 tensor(2.6037, device='cuda:0')
10200 tensor(2.5743, device='cuda:0')
10300 tensor(2.6388, device='cuda:0')
10400 tensor(2.5226, device='cuda:0')
10500 tensor(2.7028, device='cuda:0')
10600 tensor(2.4732, device='cuda:0')
10700 tensor(2.6735, device='cuda:0')
10800 tensor(2.6459, device='cuda:0')
10900 tensor(2.6105, device='cuda:0')
11000 tensor(2.6456, device='cuda:0')
Checking training accuracy ... 
